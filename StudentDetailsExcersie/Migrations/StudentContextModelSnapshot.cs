// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentDetailsExcersie.Data;

#nullable disable

namespace StudentDetailsExcersie.Migrations
{
    [DbContext(typeof(StudentContext))]
    partial class StudentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentDetailsExcersie.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int>("CurrentAddressId")
                        .HasColumnType("int");

                    b.Property<int>("PermanentAddressId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CurrentAddressId")
                        .IsUnique();

                    b.HasIndex("PermanentAddressId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupId"));

                    b.Property<string>("BloodGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodGroupId");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.ContactDetails", b =>
                {
                    b.Property<int>("ContactDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactDetailsId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("ContactDetailsId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.CurrentAddress", b =>
                {
                    b.Property<int>("CurrentAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentAddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrentAddressId");

                    b.ToTable("CurrentAddresses");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.PermanentAddress", b =>
                {
                    b.Property<int>("PermanentAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermanentAddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermanentAddressId");

                    b.ToTable("PermanentAddresses");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBarth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BloodGroupId")
                        .IsUnique();

                    b.HasIndex("ContactDetailsId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.Address", b =>
                {
                    b.HasOne("StudentDetailsExcersie.Model.CurrentAddress", "CurrentAddress")
                        .WithOne()
                        .HasForeignKey("StudentDetailsExcersie.Model.Address", "CurrentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentDetailsExcersie.Model.PermanentAddress", "PermanentAddress")
                        .WithOne()
                        .HasForeignKey("StudentDetailsExcersie.Model.Address", "PermanentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAddress");

                    b.Navigation("PermanentAddress");
                });

            modelBuilder.Entity("StudentDetailsExcersie.Model.Student", b =>
                {
                    b.HasOne("StudentDetailsExcersie.Model.Address", "Address")
                        .WithOne()
                        .HasForeignKey("StudentDetailsExcersie.Model.Student", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentDetailsExcersie.Model.BloodGroup", "BloodGroup")
                        .WithOne()
                        .HasForeignKey("StudentDetailsExcersie.Model.Student", "BloodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentDetailsExcersie.Model.ContactDetails", "ContactDetails")
                        .WithOne()
                        .HasForeignKey("StudentDetailsExcersie.Model.Student", "ContactDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("BloodGroup");

                    b.Navigation("ContactDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
